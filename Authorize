import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.access.expression.method.MethodSecurityExpressionHandler;
import org.springframework.security.access.expression.SecurityExpressionHandler;
import org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.security.access.expression.SecurityExpressionOperations;
import org.springframework.security.access.expression.method.MethodSecurityExpressionOperations;

import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.stream.Collectors;

@Aspect
@Component
public class AuthorizeCheckAspect {

    private final MethodSecurityExpressionHandler handler = new DefaultMethodSecurityExpressionHandler();

    @Around("@annotation(AuthorizeCheck)")
    public Object checkPermissions(ProceedingJoinPoint pjp) throws Throwable {
        MethodSignature methodSignature = (MethodSignature) pjp.getSignature();
        Method method = methodSignature.getMethod();

        AuthorizeCheck annotation = method.getAnnotation(AuthorizeCheck.class);
        if (annotation == null) {
            return pjp.proceed();
        }

        // Build the expression by prefixing each permission with "api-ilc:"
        String expr = Arrays.stream(annotation.value())
                .map(perm -> "'" + "api-ilc:" + perm + "'")
                .map(perm -> "hasAuthority(" + perm + ")")
                .collect(Collectors.joining(" or "));

        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        MethodSecurityExpressionOperations expression = handler.createSecurityExpressionRoot(authentication, method, pjp.getArgs());

        boolean hasPermission = handler.getExpressionParser()
                .parseExpression(expr)
                .getValue(expression, Boolean.class);

        if (Boolean.TRUE.equals(hasPermission)) {
            return pjp.proceed();
        } else {
            throw new AccessDeniedException("Access is denied");
        }
    }
}
